#include <iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
#include<cstring>
#include<vector>
#include<cmath>
#include<stack>
struct node{
    bool ill;
    int position;
    bool dir;
};
int main()
{
    int n;
    node mouse[104];
    stack<int> change;
    int out=0;int i,j;
    cin>>n;{
    for(i=1;i<=n;i++)
    {
        cin>>mouse[i].position;
        mouse[i].ill=false;
        if(mouse[i].position<0)
        {
            mouse[i].dir=false;
            mouse[i].position=0-mouse[i].position;
        }
        else
            mouse[i].dir=true;

        mouse[1].ill=true;
    }
    bool used[103];
    memset(used,false,sizeof(used));
    int sum=0;
    while(out!=n)
    {
        for(i=1;i<=n;i++)
        {
            if(used[i])continue;
            for(j=i+1;j<=n;j++)
            {
                if(used[j])continue;
                if(mouse[i].dir==mouse[j].dir)
                    continue;
                if(mouse[i].position-mouse[j].position==1||mouse[i].position-mouse[j].position==-1||mouse[i].position-mouse[j].position==0)
                {

                if(mouse[i].ill||mouse[j].ill)
                {

                    mouse[i].ill=true;
                    mouse[j].ill=true;
                }
                change.push(i);
                change.push(j);
                }
            }
        }

        for(i=1;i<=n;i++)
        {
            if(used[i])continue;
            if(mouse[i].dir)
                mouse[i].position+=1;
            else
            mouse[i].position-=1;
            if(mouse[i].position==100||mouse[i].position==0)
            {
                out+=1;
                if(mouse[i].ill==false)
                    sum+=1;
                used[i]=true;

            }
        }
        while(!change.empty())
        {
            int p=change.top();
            change.pop();
            if(mouse[p].dir)
            {
                mouse[i].position-=1;
                mouse[i].dir=false;
            }
            else
            {
                mouse[i].position+=1;
                mouse[i].dir=true;
            }
        }

    } cout<<sum<<endl;
    }
}
