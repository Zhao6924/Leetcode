#include<vector>
#include<stack>
#include<queue>
#include <bits/stdc++.h>
#include<cstring>
#include<set>
#include<algorithm>
#include<iostream>
#include <sstream>
#include<fstream>
#include <time.h>
using namespace std;
#define maxx 1500001
vector<int>relation[maxx];
bool p[maxx];
vector<int>node;
stack<int>s;
stack<int>s2;
int num=0;
vector<int>Left;
vector<int>Right;
vector<int>raw_input;
set<int>myset;
void Find(int,int,int);
stack<int>tmp;
vector< stack<int> >ALL;
set<int>instack;


//自定义排序函数
stack<int>p2;
stack<int>p1;
string file_path="/data/test_data.txt";
string save_path="/projects/student/result.txt";
string local_file="C:/Users/DELL/Desktop/test_data.txt";
string local_save= "C:/Users/DELL/Desktop/result.txt";

map<int,int>Call;
map<int,int>Call_back;

vector< map < int,vector <int> > > road;

bool cmp(stack<int>& A, stack<int>& B )
{
    p1=A;
    p2=B;
    if(p1.size()==p2.size())
    {
        while(! p1.empty())
        {
            if(p1.top()==p2.top())
            {
                p1.pop();
                p2.pop();
            }
            else
            {
                return p1.top()<p2.top();
            }
        }
    }
    return p1.size()<p2.size();
}








void String_Split(string s,string delim,vector<string> &ans)
{
    string::size_type pos_1,pos_2=0;
    while(pos_2!=s.npos)
    {
        pos_1=s.find_first_not_of(delim,pos_2);
        if(pos_1==s.npos)
            break;
        pos_2=s.find_first_of(delim,pos_1);
        ans.push_back(s.substr(pos_1,pos_2-pos_1));
    }
}
int str_int(string s)
{
    char* ensd;
    return static_cast<int>(strtol(s.c_str(),&ensd,10));

}
void readTxt(vector<int> &a,vector<int>&b,string file="C:/Users/DELL/Desktop/test_data.txt")
{
    ifstream infile;
    infile.open(file.data());
    assert(infile.is_open());

    string s;
    vector<string>ans;
    while(getline(infile,s))
    {
        String_Split(s,",",ans);

        a.push_back(str_int(ans[0]));
        b.push_back(str_int(ans[1]));

        ans.clear();
    }
    infile.close();
}



void DFS(int head)//表示的从head开始搜，DFS表示的是这里是起点，在Find里面都是找回到head的环
{
    int a;
    s.push(head);//环的路径
    instack.insert(head);//head在环中
    for(int i=0; i<relation[head].size(); i++)//便利邻接矩阵
    {
        a=relation[head][i];
        if(!p[a]||a<=head)//小于head的一定是搜过的
            continue;
        else
        {
            Find(head,2,a);//2代表step，可有可无，表示栈中有多少个元素
        }
    }
}

void preprocess()
{
    readTxt(Left,Right);//把输入读到两个vector里面
    int len=Left.size();
    for(int i=0; i<Left.size(); i++)
    {

        relation[Left[i]].push_back(Right[i]);//构建邻接矩阵
        myset.insert(Left[i]);//myset是有出度的节点
        p[Left[i]]=true;//这个点有出度，标记为可用
    }

    set<int>::iterator it;
    for(it=myset.begin(); it!=myset.end(); it++)
    {
        node.push_back(*it);//把可用的点放到node里面，其他的点都是不可用的
    }

}
void Find(int head,int step,int point)
{
    if(instack.count(point))
        return;//这个点在栈中则肯定是已经找到过的环了,肯定搜过了
    s.push(point);//进栈，表示是环的一个路径
    instack.insert(point);
    int al;
    for(int i=0; i<relation[point].size(); i++)//遍历该点的邻接矩阵
    {
        al=relation[point][i];//al表示有路
        if(!p[al]||al<head)//如果al是叶子节点，或者al小于那个开始搜的头head，就不用搜
            continue;
        if(step==7&&al!=head)//第7步还没搜出来，不是这个点
            continue;
        if(step==2&&al==head)//两个点的环。不要
            continue;

        if(al==head&&s.size()>=3&&s.size()<=7)//找到了。
        {
            s2=s;

            while(!s2.empty())
            {

                tmp.push(s2.top());//将S里面的数据拿出来，这个地方可以优化的
                s2.pop();

            }
            ALL.push_back(tmp);//把这个环放到ALL里面
            while(!tmp.empty())//清空tmp
            {
                tmp.pop();
            }

        }
        else
        {
            Find( head,step+1, al);//继续往下找,step可有可无，当时不知道为什么要加
        }

    }
    s.pop();//改点搜完，出栈
    instack.erase(point);//标记着这个点不在栈中了
}

int main()
{
    preprocess();//预处理
    sort(node.begin(),node.end());//有出度的点排序
    for(int i=0;i<node.size();i++)
    {
        Call[node[i]]=i;
        Call_back[i]=node[i];
    }
    for(int i=0;i<node.size();i++)
    {
        map< int,vector<int> > small_road;
        for(int j=0;j<relation[i].size();j++)
        {
            small_road[i].push_back(relation[i][j]);
            //vector<unordered_map<int,vector<int>>> road
        }
        if(small_road[i].size()==0||small_road[i].size()==1)
        continue;
        cout<<small_road[i].size()<< "  "<< i<<endl;
        road.push_back(small_road);
    }
    for(int i=0;i<node.size();i++)
    {
        for(int j=0;j<relation[i].size();j++)
        {
            int a=relation[i][j];
            if(road[i][a].size()!=1&&road[i][a].size()!=0)
            cout<<road[i][a].size()<<endl;  //[relation[i][j]]

        }
    }
    exit(0);


    for(int i=0; i<node.size(); i++)
    {
        DFS(node[i]);//开始DFS（i）
        while(!s.empty())
        {
            s.pop();
        }
    }

    ofstream out("C:/Users/DELL/Desktop/result.txt");//输出对象文件

    sort(ALL.begin(),ALL.end(),cmp);
    //ALL里面全是找到的环，对ALL进行长度排序，长度一样则看里面的数字
    out<<ALL.size()<<'\n';//打印
    for(int i=0; i<ALL.size(); i++)
    {

        while(!ALL[i].empty())
        {
            if(ALL[i].size()>1)
            {
                out<<ALL[i].top()<<',';
            }
            else
            {
                out<<ALL[i].top()<<'\n';
            }
            ALL[i].pop();
        }


    }
    std::cout << "The run time is: " <<(double)clock() / CLOCKS_PER_SEC;

    return 0;

}
